import { TAudioNodeConstructor } from 'standardized-audio-context/build/es2019/types/audio-node-constructor';
import { TAudioParamFactory } from 'standardized-audio-context/build/es2019/types/audio-param-factory';
import { TBiquadFilterNodeConstructor } from 'standardized-audio-context/build/es2019/types/biquad-filter-node-constructor';
import { TBiquadFilterNodeRendererFactory } from 'standardized-audio-context/build/es2019/types/biquad-filter-node-renderer-factory';
import { TGetNativeContextFunction } from 'standardized-audio-context/build/es2019/types/get-native-context-function';
import { TInvalidAccessErrorFactory } from 'standardized-audio-context/build/es2019/types/invalid-access-error-factory';
import { TIsNativeOfflineAudioContextFunction } from 'standardized-audio-context/build/es2019/types/is-native-offline-audio-context-function';
import { TNativeBiquadFilterNodeFactory } from 'standardized-audio-context/build/es2019/types/native-biquad-filter-node-factory';
import { TSetAudioNodeTailTimeFunction } from 'standardized-audio-context/build/es2019/types/set-audio-node-tail-time-function';
export declare type TBiquadFilterNodeConstructorFactory = (audioNodeConstructor: TAudioNodeConstructor, createAudioParam: TAudioParamFactory, createBiquadFilterNodeRenderer: TBiquadFilterNodeRendererFactory, createInvalidAccessError: TInvalidAccessErrorFactory, createNativeBiquadFilterNode: TNativeBiquadFilterNodeFactory, getNativeContext: TGetNativeContextFunction, isNativeOfflineAudioContext: TIsNativeOfflineAudioContextFunction, setAudioNodeTailTime: TSetAudioNodeTailTimeFunction) => TBiquadFilterNodeConstructor;
//# sourceMappingURL=biquad-filter-node-constructor-factory.d.ts.map