import { TAudioNodeConstructor } from 'standardized-audio-context/build/es2019/types/audio-node-constructor';
import { TAudioParamFactory } from 'standardized-audio-context/build/es2019/types/audio-param-factory';
import { TGetNativeContextFunction } from 'standardized-audio-context/build/es2019/types/get-native-context-function';
import { TIsNativeOfflineAudioContextFunction } from 'standardized-audio-context/build/es2019/types/is-native-offline-audio-context-function';
import { TNativeStereoPannerNodeFactory } from 'standardized-audio-context/build/es2019/types/native-stereo-panner-node-factory';
import { TStereoPannerNodeConstructor } from 'standardized-audio-context/build/es2019/types/stereo-panner-node-constructor';
import { TStereoPannerNodeRendererFactory } from 'standardized-audio-context/build/es2019/types/stereo-panner-node-renderer-factory';
export declare type TStereoPannerNodeConstructorFactory = (audioNodeConstructor: TAudioNodeConstructor, createAudioParam: TAudioParamFactory, createNativeStereoPannerNode: TNativeStereoPannerNodeFactory, createStereoPannerNodeRenderer: TStereoPannerNodeRendererFactory, getNativeContext: TGetNativeContextFunction, isNativeOfflineAudioContext: TIsNativeOfflineAudioContextFunction) => TStereoPannerNodeConstructor;
//# sourceMappingURL=stereo-panner-node-constructor-factory.d.ts.map