import { TAudioNodeConstructor } from 'standardized-audio-context/build/es2019/types/audio-node-constructor';
import { TAudioParamFactory } from 'standardized-audio-context/build/es2019/types/audio-param-factory';
import { TGetNativeContextFunction } from 'standardized-audio-context/build/es2019/types/get-native-context-function';
import { TIsNativeOfflineAudioContextFunction } from 'standardized-audio-context/build/es2019/types/is-native-offline-audio-context-function';
import { TNativeOscillatorNodeFactory } from 'standardized-audio-context/build/es2019/types/native-oscillator-node-factory';
import { TOscillatorNodeConstructor } from 'standardized-audio-context/build/es2019/types/oscillator-node-constructor';
import { TOscillatorNodeRendererFactory } from 'standardized-audio-context/build/es2019/types/oscillator-node-renderer-factory';
import { TWrapEventListenerFunction } from 'standardized-audio-context/build/es2019/types/wrap-event-listener-function';
export declare type TOscillatorNodeConstructorFactory = (audioNodeConstructor: TAudioNodeConstructor, createAudioParam: TAudioParamFactory, createNativeOscillatorNode: TNativeOscillatorNodeFactory, createOscillatorNodeRenderer: TOscillatorNodeRendererFactory, getNativeContext: TGetNativeContextFunction, isNativeOfflineAudioContext: TIsNativeOfflineAudioContextFunction, wrapEventListener: TWrapEventListenerFunction) => TOscillatorNodeConstructor;
//# sourceMappingURL=oscillator-node-constructor-factory.d.ts.map