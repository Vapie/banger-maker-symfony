import { createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent } from 'automation-events';
import { createAbortError } from 'standardized-audio-context/build/es2019/factories/abort-error';
import { createAddActiveInputConnectionToAudioNode } from 'standardized-audio-context/build/es2019/factories/add-active-input-connection-to-audio-node';
import { createAddAudioNodeConnections } from 'standardized-audio-context/build/es2019/factories/add-audio-node-connections';
import { createAddAudioParamConnections } from 'standardized-audio-context/build/es2019/factories/add-audio-param-connections';
import { createAddAudioWorkletModule } from 'standardized-audio-context/build/es2019/factories/add-audio-worklet-module';
import { createAddConnectionToAudioNode } from 'standardized-audio-context/build/es2019/factories/add-connection-to-audio-node';
import { createAddPassiveInputConnectionToAudioNode } from 'standardized-audio-context/build/es2019/factories/add-passive-input-connection-to-audio-node';
import { createAddSilentConnection } from 'standardized-audio-context/build/es2019/factories/add-silent-connection';
import { createAddUnrenderedAudioWorkletNode } from 'standardized-audio-context/build/es2019/factories/add-unrendered-audio-worklet-node';
import { createAnalyserNodeConstructor } from 'standardized-audio-context/build/es2019/factories/analyser-node-constructor';
import { createAnalyserNodeRendererFactory } from 'standardized-audio-context/build/es2019/factories/analyser-node-renderer-factory';
import { createAudioBufferConstructor } from 'standardized-audio-context/build/es2019/factories/audio-buffer-constructor';
import { createAudioBufferSourceNodeConstructor } from 'standardized-audio-context/build/es2019/factories/audio-buffer-source-node-constructor';
import { createAudioBufferSourceNodeRendererFactory } from 'standardized-audio-context/build/es2019/factories/audio-buffer-source-node-renderer-factory';
import { createAudioContextConstructor } from 'standardized-audio-context/build/es2019/factories/audio-context-constructor';
import { createAudioDestinationNodeConstructor } from 'standardized-audio-context/build/es2019/factories/audio-destination-node-constructor';
import { createAudioDestinationNodeRenderer } from 'standardized-audio-context/build/es2019/factories/audio-destination-node-renderer-factory';
import { createAudioListenerFactory } from 'standardized-audio-context/build/es2019/factories/audio-listener-factory';
import { createAudioNodeConstructor } from 'standardized-audio-context/build/es2019/factories/audio-node-constructor';
import { createAudioParamFactory } from 'standardized-audio-context/build/es2019/factories/audio-param-factory';
import { createAudioParamRenderer } from 'standardized-audio-context/build/es2019/factories/audio-param-renderer';
import { createAudioWorkletNodeConstructor } from 'standardized-audio-context/build/es2019/factories/audio-worklet-node-constructor';
import { createAudioWorkletNodeRendererFactory } from 'standardized-audio-context/build/es2019/factories/audio-worklet-node-renderer-factory';
import { createBaseAudioContextConstructor } from 'standardized-audio-context/build/es2019/factories/base-audio-context-constructor';
import { createBiquadFilterNodeConstructor } from 'standardized-audio-context/build/es2019/factories/biquad-filter-node-constructor';
import { createBiquadFilterNodeRendererFactory } from 'standardized-audio-context/build/es2019/factories/biquad-filter-node-renderer-factory';
import { createCacheTestResult } from 'standardized-audio-context/build/es2019/factories/cache-test-result';
import { createChannelMergerNodeConstructor } from 'standardized-audio-context/build/es2019/factories/channel-merger-node-constructor';
import { createChannelMergerNodeRendererFactory } from 'standardized-audio-context/build/es2019/factories/channel-merger-node-renderer-factory';
import { createChannelSplitterNodeConstructor } from 'standardized-audio-context/build/es2019/factories/channel-splitter-node-constructor';
import { createChannelSplitterNodeRendererFactory } from 'standardized-audio-context/build/es2019/factories/channel-splitter-node-renderer-factory';
import { createConnectAudioParam } from 'standardized-audio-context/build/es2019/factories/connect-audio-param';
import { createConnectMultipleOutputs } from 'standardized-audio-context/build/es2019/factories/connect-multiple-outputs';
import { createConnectedNativeAudioBufferSourceNodeFactory } from 'standardized-audio-context/build/es2019/factories/connected-native-audio-buffer-source-node-factory';
import { createConstantSourceNodeConstructor } from 'standardized-audio-context/build/es2019/factories/constant-source-node-constructor';
import { createConstantSourceNodeRendererFactory } from 'standardized-audio-context/build/es2019/factories/constant-source-node-renderer-factory';
import { createConvertNumberToUnsignedLong } from 'standardized-audio-context/build/es2019/factories/convert-number-to-unsigned-long';
import { createConvolverNodeConstructor } from 'standardized-audio-context/build/es2019/factories/convolver-node-constructor';
import { createConvolverNodeRendererFactory } from 'standardized-audio-context/build/es2019/factories/convolver-node-renderer-factory';
import { createCreateNativeOfflineAudioContext } from 'standardized-audio-context/build/es2019/factories/create-native-offline-audio-context';
import { createDataCloneError } from 'standardized-audio-context/build/es2019/factories/data-clone-error';
import { createDecodeAudioData } from 'standardized-audio-context/build/es2019/factories/decode-audio-data';
import { createDecrementCycleCounter } from 'standardized-audio-context/build/es2019/factories/decrement-cycle-counter';
import { createDelayNodeConstructor } from 'standardized-audio-context/build/es2019/factories/delay-node-constructor';
import { createDelayNodeRendererFactory } from 'standardized-audio-context/build/es2019/factories/delay-node-renderer-factory';
import { createDeleteActiveInputConnectionToAudioNode } from 'standardized-audio-context/build/es2019/factories/delete-active-input-connection-to-audio-node';
import { createDeleteUnrenderedAudioWorkletNode } from 'standardized-audio-context/build/es2019/factories/delete-unrendered-audio-worklet-node';
import { createDetectCycles } from 'standardized-audio-context/build/es2019/factories/detect-cycles';
import { createDisconnectMultipleOutputs } from 'standardized-audio-context/build/es2019/factories/disconnect-multiple-outputs';
import { createDynamicsCompressorNodeConstructor } from 'standardized-audio-context/build/es2019/factories/dynamics-compressor-node-constructor';
import { createDynamicsCompressorNodeRendererFactory } from 'standardized-audio-context/build/es2019/factories/dynamics-compressor-node-renderer-factory';
import { createEncodingError } from 'standardized-audio-context/build/es2019/factories/encoding-error';
import { createEvaluateSource } from 'standardized-audio-context/build/es2019/factories/evaluate-source';
import { createEventTargetConstructor } from 'standardized-audio-context/build/es2019/factories/event-target-constructor';
import { createExposeCurrentFrameAndCurrentTime } from 'standardized-audio-context/build/es2019/factories/expose-current-frame-and-current-time';
import { createFetchSource } from 'standardized-audio-context/build/es2019/factories/fetch-source';
import { createGainNodeConstructor } from 'standardized-audio-context/build/es2019/factories/gain-node-constructor';
import { createGainNodeRendererFactory } from 'standardized-audio-context/build/es2019/factories/gain-node-renderer-factory';
import { createGetActiveAudioWorkletNodeInputs } from 'standardized-audio-context/build/es2019/factories/get-active-audio-worklet-node-inputs';
import { createGetAudioNodeRenderer } from 'standardized-audio-context/build/es2019/factories/get-audio-node-renderer';
import { createGetAudioNodeTailTime } from 'standardized-audio-context/build/es2019/factories/get-audio-node-tail-time';
import { createGetAudioParamRenderer } from 'standardized-audio-context/build/es2019/factories/get-audio-param-renderer';
import { createGetBackupOfflineAudioContext } from 'standardized-audio-context/build/es2019/factories/get-backup-offline-audio-context';
import { createGetNativeContext } from 'standardized-audio-context/build/es2019/factories/get-native-context';
import { createGetOrCreateBackupOfflineAudioContext } from 'standardized-audio-context/build/es2019/factories/get-or-create-backup-offline-audio-context';
import { createGetUnrenderedAudioWorkletNodes } from 'standardized-audio-context/build/es2019/factories/get-unrendered-audio-worklet-nodes';
import { createIIRFilterNodeConstructor } from 'standardized-audio-context/build/es2019/factories/iir-filter-node-constructor';
import { createIIRFilterNodeRendererFactory } from 'standardized-audio-context/build/es2019/factories/iir-filter-node-renderer-factory';
import { createIncrementCycleCounterFactory } from 'standardized-audio-context/build/es2019/factories/increment-cycle-counter-factory';
import { createIndexSizeError } from 'standardized-audio-context/build/es2019/factories/index-size-error';
import { createInvalidAccessError } from 'standardized-audio-context/build/es2019/factories/invalid-access-error';
import { createInvalidStateError } from 'standardized-audio-context/build/es2019/factories/invalid-state-error';
import { createIsAnyAudioContext } from 'standardized-audio-context/build/es2019/factories/is-any-audio-context';
import { createIsAnyAudioNode } from 'standardized-audio-context/build/es2019/factories/is-any-audio-node';
import { createIsAnyAudioParam } from 'standardized-audio-context/build/es2019/factories/is-any-audio-param';
import { createIsAnyOfflineAudioContext } from 'standardized-audio-context/build/es2019/factories/is-any-offline-audio-context';
import { createIsNativeAudioContext } from 'standardized-audio-context/build/es2019/factories/is-native-audio-context';
import { createIsNativeAudioNode } from 'standardized-audio-context/build/es2019/factories/is-native-audio-node';
import { createIsNativeAudioParam } from 'standardized-audio-context/build/es2019/factories/is-native-audio-param';
import { createIsNativeContext } from 'standardized-audio-context/build/es2019/factories/is-native-context';
import { createIsNativeOfflineAudioContext } from 'standardized-audio-context/build/es2019/factories/is-native-offline-audio-context';
import { createIsSecureContext } from 'standardized-audio-context/build/es2019/factories/is-secure-context';
import { createIsSupportedPromise } from 'standardized-audio-context/build/es2019/factories/is-supported-promise';
import { createMediaElementAudioSourceNodeConstructor } from 'standardized-audio-context/build/es2019/factories/media-element-audio-source-node-constructor';
import { createMediaStreamAudioDestinationNodeConstructor } from 'standardized-audio-context/build/es2019/factories/media-stream-audio-destination-node-constructor';
import { createMediaStreamAudioSourceNodeConstructor } from 'standardized-audio-context/build/es2019/factories/media-stream-audio-source-node-constructor';
import { createMediaStreamTrackAudioSourceNodeConstructor } from 'standardized-audio-context/build/es2019/factories/media-stream-track-audio-source-node-constructor';
import { createMinimalAudioContextConstructor } from 'standardized-audio-context/build/es2019/factories/minimal-audio-context-constructor';
import { createMinimalBaseAudioContextConstructor } from 'standardized-audio-context/build/es2019/factories/minimal-base-audio-context-constructor';
import { createMinimalOfflineAudioContextConstructor } from 'standardized-audio-context/build/es2019/factories/minimal-offline-audio-context-constructor';
import { createMonitorConnections } from 'standardized-audio-context/build/es2019/factories/monitor-connections';
import { createNativeAnalyserNodeFactory } from 'standardized-audio-context/build/es2019/factories/native-analyser-node-factory';
import { createNativeAudioBufferConstructor } from 'standardized-audio-context/build/es2019/factories/native-audio-buffer-constructor';
import { createNativeAudioBufferSourceNodeFactory } from 'standardized-audio-context/build/es2019/factories/native-audio-buffer-source-node-factory';
import { createNativeAudioContextConstructor } from 'standardized-audio-context/build/es2019/factories/native-audio-context-constructor';
import { createNativeAudioDestinationNodeFactory } from 'standardized-audio-context/build/es2019/factories/native-audio-destination-node';
import { createNativeAudioWorkletNodeConstructor } from 'standardized-audio-context/build/es2019/factories/native-audio-worklet-node-constructor';
import { createNativeAudioWorkletNodeFactory } from 'standardized-audio-context/build/es2019/factories/native-audio-worklet-node-factory';
import { createNativeAudioWorkletNodeFakerFactory } from 'standardized-audio-context/build/es2019/factories/native-audio-worklet-node-faker-factory';
import { createNativeBiquadFilterNode } from 'standardized-audio-context/build/es2019/factories/native-biquad-filter-node';
import { createNativeChannelMergerNodeFactory } from 'standardized-audio-context/build/es2019/factories/native-channel-merger-node-factory';
import { createNativeChannelSplitterNode } from 'standardized-audio-context/build/es2019/factories/native-channel-splitter-node';
import { createNativeConstantSourceNodeFactory } from 'standardized-audio-context/build/es2019/factories/native-constant-source-node-factory';
import { createNativeConstantSourceNodeFakerFactory } from 'standardized-audio-context/build/es2019/factories/native-constant-source-node-faker-factory';
import { createNativeConvolverNodeFactory } from 'standardized-audio-context/build/es2019/factories/native-convolver-node-factory';
import { createNativeDelayNode } from 'standardized-audio-context/build/es2019/factories/native-delay-node';
import { createNativeDynamicsCompressorNodeFactory } from 'standardized-audio-context/build/es2019/factories/native-dynamics-compressor-node-factory';
import { createNativeGainNode } from 'standardized-audio-context/build/es2019/factories/native-gain-node';
import { createNativeIIRFilterNodeFactory } from 'standardized-audio-context/build/es2019/factories/native-iir-filter-node-factory';
import { createNativeIIRFilterNodeFakerFactory } from 'standardized-audio-context/build/es2019/factories/native-iir-filter-node-faker-factory';
import { createNativeMediaElementAudioSourceNode } from 'standardized-audio-context/build/es2019/factories/native-media-element-audio-source-node';
import { createNativeMediaStreamAudioDestinationNode } from 'standardized-audio-context/build/es2019/factories/native-media-stream-audio-destination-node';
import { createNativeMediaStreamAudioSourceNode } from 'standardized-audio-context/build/es2019/factories/native-media-stream-audio-source-node';
import { createNativeMediaStreamTrackAudioSourceNodeFactory } from 'standardized-audio-context/build/es2019/factories/native-media-stream-track-audio-source-node-factory';
import { createNativeOfflineAudioContextConstructor } from 'standardized-audio-context/build/es2019/factories/native-offline-audio-context-constructor';
import { createNativeOscillatorNodeFactory } from 'standardized-audio-context/build/es2019/factories/native-oscillator-node-factory';
import { createNativePannerNodeFactory } from 'standardized-audio-context/build/es2019/factories/native-panner-node-factory';
import { createNativePannerNodeFakerFactory } from 'standardized-audio-context/build/es2019/factories/native-panner-node-faker-factory';
import { createNativePeriodicWaveFactory } from 'standardized-audio-context/build/es2019/factories/native-periodic-wave-factory';
import { createNativeScriptProcessorNode } from 'standardized-audio-context/build/es2019/factories/native-script-processor-node';
import { createNativeStereoPannerNodeFactory } from 'standardized-audio-context/build/es2019/factories/native-stereo-panner-node-factory';
import { createNativeStereoPannerNodeFakerFactory } from 'standardized-audio-context/build/es2019/factories/native-stereo-panner-node-faker-factory';
import { createNativeWaveShaperNodeFactory } from 'standardized-audio-context/build/es2019/factories/native-wave-shaper-node-factory';
import { createNativeWaveShaperNodeFakerFactory } from 'standardized-audio-context/build/es2019/factories/native-wave-shaper-node-faker-factory';
import { createNotSupportedError } from 'standardized-audio-context/build/es2019/factories/not-supported-error';
import { createOfflineAudioContextConstructor } from 'standardized-audio-context/build/es2019/factories/offline-audio-context-constructor';
import { createOscillatorNodeConstructor } from 'standardized-audio-context/build/es2019/factories/oscillator-node-constructor';
import { createOscillatorNodeRendererFactory } from 'standardized-audio-context/build/es2019/factories/oscillator-node-renderer-factory';
import { createPannerNodeConstructor } from 'standardized-audio-context/build/es2019/factories/panner-node-constructor';
import { createPannerNodeRendererFactory } from 'standardized-audio-context/build/es2019/factories/panner-node-renderer-factory';
import { createPeriodicWaveConstructor } from 'standardized-audio-context/build/es2019/factories/periodic-wave-constructor';
import { createRenderAutomation } from 'standardized-audio-context/build/es2019/factories/render-automation';
import { createRenderInputsOfAudioNode } from 'standardized-audio-context/build/es2019/factories/render-inputs-of-audio-node';
import { createRenderInputsOfAudioParam } from 'standardized-audio-context/build/es2019/factories/render-inputs-of-audio-param';
import { createRenderNativeOfflineAudioContext } from 'standardized-audio-context/build/es2019/factories/render-native-offline-audio-context';
import { createSetActiveAudioWorkletNodeInputs } from 'standardized-audio-context/build/es2019/factories/set-active-audio-worklet-node-inputs';
import { createSetAudioNodeTailTime } from 'standardized-audio-context/build/es2019/factories/set-audio-node-tail-time';
import { createStartRendering } from 'standardized-audio-context/build/es2019/factories/start-rendering';
import { createStereoPannerNodeConstructor } from 'standardized-audio-context/build/es2019/factories/stereo-panner-node-constructor';
import { createStereoPannerNodeRendererFactory } from 'standardized-audio-context/build/es2019/factories/stereo-panner-node-renderer-factory';
import { createTestAudioBufferConstructorSupport } from 'standardized-audio-context/build/es2019/factories/test-audio-buffer-constructor-support';
import { createTestAudioBufferCopyChannelMethodsSubarraySupport } from 'standardized-audio-context/build/es2019/factories/test-audio-buffer-copy-channel-methods-subarray-support';
import { createTestAudioContextCloseMethodSupport } from 'standardized-audio-context/build/es2019/factories/test-audio-context-close-method-support';
import { createTestAudioContextDecodeAudioDataMethodTypeErrorSupport } from 'standardized-audio-context/build/es2019/factories/test-audio-context-decode-audio-data-method-type-error-support';
import { createTestAudioContextOptionsSupport } from 'standardized-audio-context/build/es2019/factories/test-audio-context-options-support';
import { createTestAudioNodeConnectMethodSupport } from 'standardized-audio-context/build/es2019/factories/test-audio-node-connect-method-support';
import { createTestAudioWorkletProcessorNoOutputsSupport } from 'standardized-audio-context/build/es2019/factories/test-audio-worklet-processor-no-outputs-support';
import { createTestAudioWorkletProcessorPostMessageSupport } from 'standardized-audio-context/build/es2019/factories/test-audio-worklet-processor-post-message-support';
import { createTestChannelMergerNodeChannelCountSupport } from 'standardized-audio-context/build/es2019/factories/test-channel-merger-node-channel-count-support';
import { createTestConstantSourceNodeAccurateSchedulingSupport } from 'standardized-audio-context/build/es2019/factories/test-constant-source-node-accurate-scheduling-support';
import { createTestConvolverNodeBufferReassignabilitySupport } from 'standardized-audio-context/build/es2019/factories/test-convolver-node-buffer-reassignability-support';
import { createTestConvolverNodeChannelCountSupport } from 'standardized-audio-context/build/es2019/factories/test-convolver-node-channel-count-support';
import { createTestIsSecureContextSupport } from 'standardized-audio-context/build/es2019/factories/test-is-secure-context-support';
import { createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport } from 'standardized-audio-context/build/es2019/factories/test-media-stream-audio-source-node-media-stream-without-audio-track-support';
import { createTestOfflineAudioContextCurrentTimeSupport } from 'standardized-audio-context/build/es2019/factories/test-offline-audio-context-current-time-support';
import { createTestStereoPannerNodeDefaultValueSupport } from 'standardized-audio-context/build/es2019/factories/test-stereo-panner-node-default-value-support';
import { createUnknownError } from 'standardized-audio-context/build/es2019/factories/unknown-error';
import { createWaveShaperNodeConstructor } from 'standardized-audio-context/build/es2019/factories/wave-shaper-node-constructor';
import { createWaveShaperNodeRendererFactory } from 'standardized-audio-context/build/es2019/factories/wave-shaper-node-renderer-factory';
import { createWindow } from 'standardized-audio-context/build/es2019/factories/window';
import { createWrapAudioBufferCopyChannelMethods } from 'standardized-audio-context/build/es2019/factories/wrap-audio-buffer-copy-channel-methods';
import { createWrapAudioBufferCopyChannelMethodsOutOfBounds } from 'standardized-audio-context/build/es2019/factories/wrap-audio-buffer-copy-channel-methods-out-of-bounds';
import { createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer } from 'standardized-audio-context/build/es2019/factories/wrap-audio-buffer-source-node-stop-method-nullified-buffer';
import { createWrapChannelMergerNode } from 'standardized-audio-context/build/es2019/factories/wrap-channel-merger-node';
import { AUDIO_NODE_CONNECTIONS_STORE, AUDIO_NODE_STORE, AUDIO_PARAM_CONNECTIONS_STORE, AUDIO_PARAM_STORE, CONTEXT_STORE, CYCLE_COUNTERS } from 'standardized-audio-context/build/es2019/globals';
import { connectNativeAudioNodeToNativeAudioNode } from 'standardized-audio-context/build/es2019/helpers/connect-native-audio-node-to-native-audio-node';
import { disconnectNativeAudioNodeFromNativeAudioNode } from 'standardized-audio-context/build/es2019/helpers/disconnect-native-audio-node-from-native-audio-node';
import { getAudioNodeConnections } from 'standardized-audio-context/build/es2019/helpers/get-audio-node-connections';
import { getAudioParamConnections } from 'standardized-audio-context/build/es2019/helpers/get-audio-param-connections';
import { getEventListenersOfAudioNode } from 'standardized-audio-context/build/es2019/helpers/get-event-listeners-of-audio-node';
import { getNativeAudioNode } from 'standardized-audio-context/build/es2019/helpers/get-native-audio-node';
import { getNativeAudioParam } from 'standardized-audio-context/build/es2019/helpers/get-native-audio-param';
import { getValueForKey } from 'standardized-audio-context/build/es2019/helpers/get-value-for-key';
import { insertElementInSet } from 'standardized-audio-context/build/es2019/helpers/insert-element-in-set';
import { isActiveAudioNode } from 'standardized-audio-context/build/es2019/helpers/is-active-audio-node';
import { isDCCurve } from 'standardized-audio-context/build/es2019/helpers/is-dc-curve';
import { isPartOfACycle } from 'standardized-audio-context/build/es2019/helpers/is-part-of-a-cycle';
import { isPassiveAudioNode } from 'standardized-audio-context/build/es2019/helpers/is-passive-audio-node';
import { overwriteAccessors } from 'standardized-audio-context/build/es2019/helpers/overwrite-accessors';
import { pickElementFromSet } from 'standardized-audio-context/build/es2019/helpers/pick-element-from-set';
import { sanitizeAudioWorkletNodeOptions } from 'standardized-audio-context/build/es2019/helpers/sanitize-audio-worklet-node-options';
import { sanitizeChannelSplitterOptions } from 'standardized-audio-context/build/es2019/helpers/sanitize-channel-splitter-options';
import { sanitizePeriodicWaveOptions } from 'standardized-audio-context/build/es2019/helpers/sanitize-periodic-wave-options';
import { setValueAtTimeUntilPossible } from 'standardized-audio-context/build/es2019/helpers/set-value-at-time-until-possible';
import { testAudioBufferCopyChannelMethodsOutOfBoundsSupport } from 'standardized-audio-context/build/es2019/helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support';
import { testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport } from 'standardized-audio-context/build/es2019/helpers/test-audio-buffer-source-node-start-method-consecutive-calls-support';
import { testAudioBufferSourceNodeStartMethodOffsetClampingSupport } from 'standardized-audio-context/build/es2019/helpers/test-audio-buffer-source-node-start-method-offset-clamping-support';
import { testAudioBufferSourceNodeStopMethodNullifiedBufferSupport } from 'standardized-audio-context/build/es2019/helpers/test-audio-buffer-source-node-stop-method-nullified-buffer-support';
import { testAudioScheduledSourceNodeStartMethodNegativeParametersSupport } from 'standardized-audio-context/build/es2019/helpers/test-audio-scheduled-source-node-start-method-negative-parameters-support';
import { testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport } from 'standardized-audio-context/build/es2019/helpers/test-audio-scheduled-source-node-stop-method-consecutive-calls-support';
import { testAudioScheduledSourceNodeStopMethodNegativeParametersSupport } from 'standardized-audio-context/build/es2019/helpers/test-audio-scheduled-source-node-stop-method-negative-parameters-support';
import { testDomExceptionConstructorSupport } from 'standardized-audio-context/build/es2019/helpers/test-dom-exception-constructor-support';
import { testPromiseSupport } from 'standardized-audio-context/build/es2019/helpers/test-promise-support';
import { testTransferablesSupport } from 'standardized-audio-context/build/es2019/helpers/test-transferables-support';
import { wrapAudioBufferSourceNodeStartMethodOffsetClamping } from 'standardized-audio-context/build/es2019/helpers/wrap-audio-buffer-source-node-start-method-offset-clamping';
import { wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls } from 'standardized-audio-context/build/es2019/helpers/wrap-audio-scheduled-source-node-stop-method-consecutive-calls';
import { wrapEventListener } from 'standardized-audio-context/build/es2019/helpers/wrap-event-listener';
/*
 * @todo Explicitly referencing the barrel file seems to be necessary when enabling the
 * isolatedModules compiler option.
 */
export * from 'standardized-audio-context/build/es2019/interfaces';
export * from 'standardized-audio-context/build/es2019/types';
const addActiveInputConnectionToAudioNode = createAddActiveInputConnectionToAudioNode(insertElementInSet);
const addPassiveInputConnectionToAudioNode = createAddPassiveInputConnectionToAudioNode(insertElementInSet);
const deleteActiveInputConnectionToAudioNode = createDeleteActiveInputConnectionToAudioNode(pickElementFromSet);
const audioNodeTailTimeStore = new WeakMap();
const getAudioNodeTailTime = createGetAudioNodeTailTime(audioNodeTailTimeStore);
const cacheTestResult = createCacheTestResult(new Map(), new WeakMap());
const window = createWindow();
const createNativeAnalyserNode = createNativeAnalyserNodeFactory(cacheTestResult, createIndexSizeError);
const getAudioNodeRenderer = createGetAudioNodeRenderer(getAudioNodeConnections);
const renderInputsOfAudioNode = createRenderInputsOfAudioNode(getAudioNodeConnections, getAudioNodeRenderer, isPartOfACycle);
const createAnalyserNodeRenderer = createAnalyserNodeRendererFactory(createNativeAnalyserNode, getNativeAudioNode, renderInputsOfAudioNode);
const getNativeContext = createGetNativeContext(CONTEXT_STORE);
const nativeOfflineAudioContextConstructor = createNativeOfflineAudioContextConstructor(window);
const isNativeOfflineAudioContext = createIsNativeOfflineAudioContext(nativeOfflineAudioContextConstructor);
const audioParamAudioNodeStore = new WeakMap();
const eventTargetConstructor = createEventTargetConstructor(wrapEventListener);
const nativeAudioContextConstructor = createNativeAudioContextConstructor(window);
const isNativeAudioContext = createIsNativeAudioContext(nativeAudioContextConstructor);
const isNativeAudioNode = createIsNativeAudioNode(window);
const isNativeAudioParam = createIsNativeAudioParam(window);
const audioNodeConstructor = createAudioNodeConstructor(createAddAudioNodeConnections(AUDIO_NODE_CONNECTIONS_STORE), createAddConnectionToAudioNode(addActiveInputConnectionToAudioNode, addPassiveInputConnectionToAudioNode, connectNativeAudioNodeToNativeAudioNode, deleteActiveInputConnectionToAudioNode, disconnectNativeAudioNodeFromNativeAudioNode, getAudioNodeConnections, getAudioNodeTailTime, getEventListenersOfAudioNode, getNativeAudioNode, insertElementInSet, isActiveAudioNode, isPartOfACycle, isPassiveAudioNode), cacheTestResult, createIncrementCycleCounterFactory(CYCLE_COUNTERS, disconnectNativeAudioNodeFromNativeAudioNode, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, isActiveAudioNode), createIndexSizeError, createInvalidAccessError, createNotSupportedError, createDecrementCycleCounter(connectNativeAudioNodeToNativeAudioNode, CYCLE_COUNTERS, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, getNativeContext, isActiveAudioNode, isNativeOfflineAudioContext), createDetectCycles(audioParamAudioNodeStore, getAudioNodeConnections, getValueForKey), eventTargetConstructor, getNativeContext, isNativeAudioContext, isNativeAudioNode, isNativeAudioParam, isNativeOfflineAudioContext);
const analyserNodeConstructor = createAnalyserNodeConstructor(audioNodeConstructor, createAnalyserNodeRenderer, createIndexSizeError, createNativeAnalyserNode, getNativeContext, isNativeOfflineAudioContext);
export { analyserNodeConstructor as AnalyserNode };
const audioBufferStore = new WeakSet();
const nativeAudioBufferConstructor = createNativeAudioBufferConstructor(window);
const convertNumberToUnsignedLong = createConvertNumberToUnsignedLong(new Uint32Array(1));
const wrapAudioBufferCopyChannelMethods = createWrapAudioBufferCopyChannelMethods(convertNumberToUnsignedLong, createIndexSizeError);
const wrapAudioBufferCopyChannelMethodsOutOfBounds = createWrapAudioBufferCopyChannelMethodsOutOfBounds(convertNumberToUnsignedLong);
const audioBufferConstructor = createAudioBufferConstructor(audioBufferStore, cacheTestResult, createNotSupportedError, nativeAudioBufferConstructor, nativeOfflineAudioContextConstructor, createTestAudioBufferConstructorSupport(nativeAudioBufferConstructor), wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);
export { audioBufferConstructor as AudioBuffer };
const addSilentConnection = createAddSilentConnection(createNativeGainNode);
const renderInputsOfAudioParam = createRenderInputsOfAudioParam(getAudioNodeRenderer, getAudioParamConnections, isPartOfACycle);
const connectAudioParam = createConnectAudioParam(renderInputsOfAudioParam);
const createNativeAudioBufferSourceNode = createNativeAudioBufferSourceNodeFactory(addSilentConnection, cacheTestResult, testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, testAudioBufferSourceNodeStartMethodOffsetClampingSupport, testAudioBufferSourceNodeStopMethodNullifiedBufferSupport, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioBufferSourceNodeStartMethodOffsetClamping, createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer(overwriteAccessors), wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls);
const renderAutomation = createRenderAutomation(createGetAudioParamRenderer(getAudioParamConnections), renderInputsOfAudioParam);
const createAudioBufferSourceNodeRenderer = createAudioBufferSourceNodeRendererFactory(connectAudioParam, createNativeAudioBufferSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);
const createAudioParam = createAudioParamFactory(createAddAudioParamConnections(AUDIO_PARAM_CONNECTIONS_STORE), audioParamAudioNodeStore, AUDIO_PARAM_STORE, createAudioParamRenderer, createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent, nativeAudioContextConstructor, setValueAtTimeUntilPossible);
const audioBufferSourceNodeConstructor = createAudioBufferSourceNodeConstructor(audioNodeConstructor, createAudioBufferSourceNodeRenderer, createAudioParam, createInvalidStateError, createNativeAudioBufferSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener);
export { audioBufferSourceNodeConstructor as AudioBufferSourceNode };
const audioDestinationNodeConstructor = createAudioDestinationNodeConstructor(audioNodeConstructor, createAudioDestinationNodeRenderer, createIndexSizeError, createInvalidStateError, createNativeAudioDestinationNodeFactory(createNativeGainNode, overwriteAccessors), getNativeContext, isNativeOfflineAudioContext, renderInputsOfAudioNode);
const createBiquadFilterNodeRenderer = createBiquadFilterNodeRendererFactory(connectAudioParam, createNativeBiquadFilterNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);
const setAudioNodeTailTime = createSetAudioNodeTailTime(audioNodeTailTimeStore);
const biquadFilterNodeConstructor = createBiquadFilterNodeConstructor(audioNodeConstructor, createAudioParam, createBiquadFilterNodeRenderer, createInvalidAccessError, createNativeBiquadFilterNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);
const monitorConnections = createMonitorConnections(insertElementInSet, isNativeAudioNode);
const wrapChannelMergerNode = createWrapChannelMergerNode(createInvalidStateError, monitorConnections);
const createNativeChannelMergerNode = createNativeChannelMergerNodeFactory(nativeAudioContextConstructor, wrapChannelMergerNode);
const createChannelMergerNodeRenderer = createChannelMergerNodeRendererFactory(createNativeChannelMergerNode, getNativeAudioNode, renderInputsOfAudioNode);
const channelMergerNodeConstructor = createChannelMergerNodeConstructor(audioNodeConstructor, createChannelMergerNodeRenderer, createNativeChannelMergerNode, getNativeContext, isNativeOfflineAudioContext);
const createChannelSplitterNodeRenderer = createChannelSplitterNodeRendererFactory(createNativeChannelSplitterNode, getNativeAudioNode, renderInputsOfAudioNode);
const channelSplitterNodeConstructor = createChannelSplitterNodeConstructor(audioNodeConstructor, createChannelSplitterNodeRenderer, createNativeChannelSplitterNode, getNativeContext, isNativeOfflineAudioContext, sanitizeChannelSplitterOptions);
const createNativeConstantSourceNodeFaker = createNativeConstantSourceNodeFakerFactory(addSilentConnection, createNativeAudioBufferSourceNode, createNativeGainNode, monitorConnections);
const createNativeConstantSourceNode = createNativeConstantSourceNodeFactory(addSilentConnection, cacheTestResult, createNativeConstantSourceNodeFaker, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport);
const createConstantSourceNodeRenderer = createConstantSourceNodeRendererFactory(connectAudioParam, createNativeConstantSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);
const constantSourceNodeConstructor = createConstantSourceNodeConstructor(audioNodeConstructor, createAudioParam, createConstantSourceNodeRenderer, createNativeConstantSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener);
const createNativeConvolverNode = createNativeConvolverNodeFactory(createNotSupportedError, overwriteAccessors);
const createConvolverNodeRenderer = createConvolverNodeRendererFactory(createNativeConvolverNode, getNativeAudioNode, renderInputsOfAudioNode);
const convolverNodeConstructor = createConvolverNodeConstructor(audioNodeConstructor, createConvolverNodeRenderer, createNativeConvolverNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);
const createDelayNodeRenderer = createDelayNodeRendererFactory(connectAudioParam, createNativeDelayNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);
const delayNodeConstructor = createDelayNodeConstructor(audioNodeConstructor, createAudioParam, createDelayNodeRenderer, createNativeDelayNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);
const createNativeDynamicsCompressorNode = createNativeDynamicsCompressorNodeFactory(createNotSupportedError);
const createDynamicsCompressorNodeRenderer = createDynamicsCompressorNodeRendererFactory(connectAudioParam, createNativeDynamicsCompressorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);
const dynamicsCompressorNodeConstructor = createDynamicsCompressorNodeConstructor(audioNodeConstructor, createAudioParam, createDynamicsCompressorNodeRenderer, createNativeDynamicsCompressorNode, createNotSupportedError, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);
const createGainNodeRenderer = createGainNodeRendererFactory(connectAudioParam, createNativeGainNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);
const gainNodeConstructor = createGainNodeConstructor(audioNodeConstructor, createAudioParam, createGainNodeRenderer, createNativeGainNode, getNativeContext, isNativeOfflineAudioContext);
const createNativeIIRFilterNodeFaker = createNativeIIRFilterNodeFakerFactory(createInvalidAccessError, createInvalidStateError, createNativeScriptProcessorNode, createNotSupportedError);
const renderNativeOfflineAudioContext = createRenderNativeOfflineAudioContext(cacheTestResult, createNativeGainNode, createNativeScriptProcessorNode, createTestOfflineAudioContextCurrentTimeSupport(createNativeGainNode, nativeOfflineAudioContextConstructor));
const createIIRFilterNodeRenderer = createIIRFilterNodeRendererFactory(createNativeAudioBufferSourceNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderInputsOfAudioNode, renderNativeOfflineAudioContext);
const createNativeIIRFilterNode = createNativeIIRFilterNodeFactory(createNativeIIRFilterNodeFaker);
const iIRFilterNodeConstructor = createIIRFilterNodeConstructor(audioNodeConstructor, createNativeIIRFilterNode, createIIRFilterNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);
const createAudioListener = createAudioListenerFactory(createAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeScriptProcessorNode, isNativeOfflineAudioContext);
const unrenderedAudioWorkletNodeStore = new WeakMap();
const minimalBaseAudioContextConstructor = createMinimalBaseAudioContextConstructor(audioDestinationNodeConstructor, createAudioListener, eventTargetConstructor, isNativeOfflineAudioContext, unrenderedAudioWorkletNodeStore, wrapEventListener);
const createNativeOscillatorNode = createNativeOscillatorNodeFactory(addSilentConnection, cacheTestResult, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls);
const createOscillatorNodeRenderer = createOscillatorNodeRendererFactory(connectAudioParam, createNativeOscillatorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);
const oscillatorNodeConstructor = createOscillatorNodeConstructor(audioNodeConstructor, createAudioParam, createNativeOscillatorNode, createOscillatorNodeRenderer, getNativeContext, isNativeOfflineAudioContext, wrapEventListener);
const createConnectedNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNodeFactory(createNativeAudioBufferSourceNode);
const createNativeWaveShaperNodeFaker = createNativeWaveShaperNodeFakerFactory(createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeGainNode, isDCCurve, monitorConnections);
const createNativeWaveShaperNode = createNativeWaveShaperNodeFactory(createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeWaveShaperNodeFaker, isDCCurve, monitorConnections, nativeAudioContextConstructor, overwriteAccessors);
const createNativePannerNodeFaker = createNativePannerNodeFakerFactory(connectNativeAudioNodeToNativeAudioNode, createInvalidStateError, createNativeChannelMergerNode, createNativeGainNode, createNativeScriptProcessorNode, createNativeWaveShaperNode, createNotSupportedError, disconnectNativeAudioNodeFromNativeAudioNode, monitorConnections);
const createNativePannerNode = createNativePannerNodeFactory(createNativePannerNodeFaker);
const createPannerNodeRenderer = createPannerNodeRendererFactory(connectAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeGainNode, createNativePannerNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext);
const pannerNodeConstructor = createPannerNodeConstructor(audioNodeConstructor, createAudioParam, createNativePannerNode, createPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);
const createNativePeriodicWave = createNativePeriodicWaveFactory(createIndexSizeError);
const periodicWaveConstructor = createPeriodicWaveConstructor(createNativePeriodicWave, getNativeContext, new WeakSet(), sanitizePeriodicWaveOptions);
const nativeStereoPannerNodeFakerFactory = createNativeStereoPannerNodeFakerFactory(createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeGainNode, createNativeWaveShaperNode, createNotSupportedError, monitorConnections);
const createNativeStereoPannerNode = createNativeStereoPannerNodeFactory(nativeStereoPannerNodeFakerFactory, createNotSupportedError);
const createStereoPannerNodeRenderer = createStereoPannerNodeRendererFactory(connectAudioParam, createNativeStereoPannerNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);
const stereoPannerNodeConstructor = createStereoPannerNodeConstructor(audioNodeConstructor, createAudioParam, createNativeStereoPannerNode, createStereoPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext);
const createWaveShaperNodeRenderer = createWaveShaperNodeRendererFactory(createNativeWaveShaperNode, getNativeAudioNode, renderInputsOfAudioNode);
const waveShaperNodeConstructor = createWaveShaperNodeConstructor(audioNodeConstructor, createInvalidStateError, createNativeWaveShaperNode, createWaveShaperNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);
const isSecureContext = createIsSecureContext(window);
const exposeCurrentFrameAndCurrentTime = createExposeCurrentFrameAndCurrentTime(window);
const backupOfflineAudioContextStore = new WeakMap();
const getOrCreateBackupOfflineAudioContext = createGetOrCreateBackupOfflineAudioContext(backupOfflineAudioContextStore, nativeOfflineAudioContextConstructor);
const nativeAudioWorkletNodeConstructor = createNativeAudioWorkletNodeConstructor(window);
// The addAudioWorkletModule() function is only available in a SecureContext.
export const addAudioWorkletModule = isSecureContext
    ? createAddAudioWorkletModule(cacheTestResult, createNotSupportedError, createEvaluateSource(window), exposeCurrentFrameAndCurrentTime, createFetchSource(createAbortError), getNativeContext, getOrCreateBackupOfflineAudioContext, isNativeOfflineAudioContext, new WeakMap(), new WeakMap(), createTestAudioWorkletProcessorPostMessageSupport(nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor), 
    // @todo window is guaranteed to be defined because isSecureContext checks that as well.
    window)
    : undefined;
const isNativeContext = createIsNativeContext(isNativeAudioContext, isNativeOfflineAudioContext);
export const decodeAudioData = createDecodeAudioData(audioBufferStore, cacheTestResult, createDataCloneError, createEncodingError, new WeakSet(), getNativeContext, isNativeContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, testPromiseSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);
const baseAudioContextConstructor = createBaseAudioContextConstructor(addAudioWorkletModule, analyserNodeConstructor, audioBufferConstructor, audioBufferSourceNodeConstructor, biquadFilterNodeConstructor, channelMergerNodeConstructor, channelSplitterNodeConstructor, constantSourceNodeConstructor, convolverNodeConstructor, decodeAudioData, delayNodeConstructor, dynamicsCompressorNodeConstructor, gainNodeConstructor, iIRFilterNodeConstructor, minimalBaseAudioContextConstructor, oscillatorNodeConstructor, pannerNodeConstructor, periodicWaveConstructor, stereoPannerNodeConstructor, waveShaperNodeConstructor);
const mediaElementAudioSourceNodeConstructor = createMediaElementAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaElementAudioSourceNode, getNativeContext, isNativeOfflineAudioContext);
const mediaStreamAudioDestinationNodeConstructor = createMediaStreamAudioDestinationNodeConstructor(audioNodeConstructor, createNativeMediaStreamAudioDestinationNode, getNativeContext, isNativeOfflineAudioContext);
const mediaStreamAudioSourceNodeConstructor = createMediaStreamAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaStreamAudioSourceNode, getNativeContext, isNativeOfflineAudioContext);
const createNativeMediaStreamTrackAudioSourceNode = createNativeMediaStreamTrackAudioSourceNodeFactory(createInvalidStateError, isNativeOfflineAudioContext);
const mediaStreamTrackAudioSourceNodeConstructor = createMediaStreamTrackAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaStreamTrackAudioSourceNode, getNativeContext);
const audioContextConstructor = createAudioContextConstructor(baseAudioContextConstructor, createInvalidStateError, createNotSupportedError, createUnknownError, mediaElementAudioSourceNodeConstructor, mediaStreamAudioDestinationNodeConstructor, mediaStreamAudioSourceNodeConstructor, mediaStreamTrackAudioSourceNodeConstructor, nativeAudioContextConstructor);
export { audioContextConstructor as AudioContext };
const getUnrenderedAudioWorkletNodes = createGetUnrenderedAudioWorkletNodes(unrenderedAudioWorkletNodeStore);
const addUnrenderedAudioWorkletNode = createAddUnrenderedAudioWorkletNode(getUnrenderedAudioWorkletNodes);
const connectMultipleOutputs = createConnectMultipleOutputs(createIndexSizeError);
const deleteUnrenderedAudioWorkletNode = createDeleteUnrenderedAudioWorkletNode(getUnrenderedAudioWorkletNodes);
const disconnectMultipleOutputs = createDisconnectMultipleOutputs(createIndexSizeError);
const activeAudioWorkletNodeInputsStore = new WeakMap();
const getActiveAudioWorkletNodeInputs = createGetActiveAudioWorkletNodeInputs(activeAudioWorkletNodeInputsStore, getValueForKey);
const createNativeAudioWorkletNodeFaker = createNativeAudioWorkletNodeFakerFactory(connectMultipleOutputs, createIndexSizeError, createInvalidStateError, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, createNativeScriptProcessorNode, createNotSupportedError, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, getActiveAudioWorkletNodeInputs, monitorConnections);
const createNativeAudioWorkletNode = createNativeAudioWorkletNodeFactory(createInvalidStateError, createNativeAudioWorkletNodeFaker, createNativeGainNode, createNotSupportedError, monitorConnections);
const createAudioWorkletNodeRenderer = createAudioWorkletNodeRendererFactory(connectAudioParam, connectMultipleOutputs, createNativeAudioBufferSourceNode, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, deleteUnrenderedAudioWorkletNode, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, getNativeAudioNode, nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext);
const getBackupOfflineAudioContext = createGetBackupOfflineAudioContext(backupOfflineAudioContextStore);
const setActiveAudioWorkletNodeInputs = createSetActiveAudioWorkletNodeInputs(activeAudioWorkletNodeInputsStore);
// The AudioWorkletNode constructor is only available in a SecureContext.
const audioWorkletNodeConstructor = isSecureContext
    ? createAudioWorkletNodeConstructor(addUnrenderedAudioWorkletNode, audioNodeConstructor, createAudioParam, createAudioWorkletNodeRenderer, createNativeAudioWorkletNode, getAudioNodeConnections, getBackupOfflineAudioContext, getNativeContext, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, sanitizeAudioWorkletNodeOptions, setActiveAudioWorkletNodeInputs, wrapEventListener)
    : undefined;
export { audioWorkletNodeConstructor as AudioWorkletNode };
export { biquadFilterNodeConstructor as BiquadFilterNode };
export { channelMergerNodeConstructor as ChannelMergerNode };
export { channelSplitterNodeConstructor as ChannelSplitterNode };
export { convolverNodeConstructor as ConvolverNode };
export { constantSourceNodeConstructor as ConstantSourceNode };
export { delayNodeConstructor as DelayNode };
export { dynamicsCompressorNodeConstructor as DynamicsCompressorNode };
export { gainNodeConstructor as GainNode };
export { iIRFilterNodeConstructor as IIRFilterNode };
export { mediaElementAudioSourceNodeConstructor as MediaElementAudioSourceNode };
export { mediaStreamAudioDestinationNodeConstructor as MediaStreamAudioDestinationNode };
export { mediaStreamAudioSourceNodeConstructor as MediaStreamAudioSourceNode };
export { mediaStreamTrackAudioSourceNodeConstructor as MediaStreamTrackAudioSourceNode };
const minimalAudioContextConstructor = createMinimalAudioContextConstructor(createInvalidStateError, createNotSupportedError, createUnknownError, minimalBaseAudioContextConstructor, nativeAudioContextConstructor);
export { minimalAudioContextConstructor as MinimalAudioContext };
const createNativeOfflineAudioContext = createCreateNativeOfflineAudioContext(createNotSupportedError, nativeOfflineAudioContextConstructor);
const startRendering = createStartRendering(audioBufferStore, cacheTestResult, getAudioNodeRenderer, getUnrenderedAudioWorkletNodes, renderNativeOfflineAudioContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);
const minimalOfflineAudioContextConstructor = createMinimalOfflineAudioContextConstructor(cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, minimalBaseAudioContextConstructor, startRendering);
export { minimalOfflineAudioContextConstructor as MinimalOfflineAudioContext };
const offlineAudioContextConstructor = createOfflineAudioContextConstructor(baseAudioContextConstructor, cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, startRendering);
export { offlineAudioContextConstructor as OfflineAudioContext };
export { oscillatorNodeConstructor as OscillatorNode };
export { pannerNodeConstructor as PannerNode };
export { periodicWaveConstructor as PeriodicWave };
export { stereoPannerNodeConstructor as StereoPannerNode };
export { waveShaperNodeConstructor as WaveShaperNode };
export const isAnyAudioContext = createIsAnyAudioContext(CONTEXT_STORE, isNativeAudioContext);
export const isAnyAudioNode = createIsAnyAudioNode(AUDIO_NODE_STORE, isNativeAudioNode);
export const isAnyAudioParam = createIsAnyAudioParam(AUDIO_PARAM_STORE, isNativeAudioParam);
export const isAnyOfflineAudioContext = createIsAnyOfflineAudioContext(CONTEXT_STORE, isNativeOfflineAudioContext);
export const isSupported = () => createIsSupportedPromise(cacheTestResult, createTestAudioBufferCopyChannelMethodsSubarraySupport(nativeOfflineAudioContextConstructor), createTestAudioContextCloseMethodSupport(nativeAudioContextConstructor), createTestAudioContextDecodeAudioDataMethodTypeErrorSupport(nativeOfflineAudioContextConstructor), createTestAudioContextOptionsSupport(nativeAudioContextConstructor), createTestAudioNodeConnectMethodSupport(nativeOfflineAudioContextConstructor), createTestAudioWorkletProcessorNoOutputsSupport(nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor), createTestChannelMergerNodeChannelCountSupport(nativeOfflineAudioContextConstructor), createTestConstantSourceNodeAccurateSchedulingSupport(nativeOfflineAudioContextConstructor), createTestConvolverNodeBufferReassignabilitySupport(nativeOfflineAudioContextConstructor), createTestConvolverNodeChannelCountSupport(nativeOfflineAudioContextConstructor), testDomExceptionConstructorSupport, createTestIsSecureContextSupport(window), createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport(nativeAudioContextConstructor), createTestStereoPannerNodeDefaultValueSupport(nativeOfflineAudioContextConstructor), testTransferablesSupport);
//# sourceMappingURL=module.js.map